import datetime
import oci
import shutil
from oci.config import validate_config

log_file_path = "D:\LogRhythm\OCI"
log_file = log_file_path + "\oci_audit.log"

def get_subscription_regions(identity, tenancy_id):
    '''
    To retrieve the list of all available regions.
    '''
    list_of_regions = []
    list_regions_response = identity.list_region_subscriptions(tenancy_id)
    for r in list_regions_response.data:
        list_of_regions.append(r.region_name)
    return list_of_regions


def get_compartments(identity, tenancy_id):
    '''
    Retrieve the list of compartments under the tenancy.
    '''
    list_compartments_response = oci.pagination.list_call_get_all_results(
        identity.list_compartments,
        compartment_id=tenancy_id).data

    compartment_ocids = [c.id for c in filter(lambda c: c.lifecycle_state == 'ACTIVE', list_compartments_response)]

    return compartment_ocids


def get_audit_events(audit, compartment_ocids, start_time, end_time):
    '''
    Get events iteratively for each compartment defined in 'compartments_ocids'
    for the region defined in 'audit'.
    This method eagerly loads all audit records in the time range and it does
    have performance implications of lot of audit records.
    Ideally, the generator method in oci.pagination should be used to lazily
    load results.
    '''
    list_of_audit_events = []
    for c in compartment_ocids:
        list_events_response = oci.pagination.list_call_get_all_results(
            audit.list_events,
            compartment_id=c,
            start_time=start_time,
            end_time=end_time).data

        #  Results for a compartment 'c' for a region defined
        #  in 'audit' object.
        list_of_audit_events.extend(list_events_response)
    return list_of_audit_events

if os.path.isdir(log_file_path):
        print ("Output directory %s exists" % log_file_path)
else:
    try:
        os.makedirs(log_file_path)
    except OSError:
        print ("Error Creating Output Directory %s" % log_file_path)
    else:
        print ("Successfully created Output Directory %s" % log_file_path)

config = oci.config.from_file("./oci_config","DEFAULT")

validate_config(config)

tenancy_id = config["tenancy"]

# Initialize CLient
identity = oci.identity.IdentityClient(config)

#user = identity.get_user(config["user"]).data

end_time = datetime.datetime.utcnow()
start_time = end_time + datetime.timedelta(days=-24)

# This array will be used to store the list of available regions.
regions = get_subscription_regions(identity, tenancy_id)


# This array will be used to store the list of compartments in the tenancy.
compartments = get_compartments(identity, tenancy_id)

audit = oci.audit.audit_client.AuditClient(config)

#  For each region get the logs for each compartment.


of = open(log_file,"a")

for r in regions:
    #  Intialize with a region value.

    audit.base_client.set_region(r)
    #  To separate results by region use print here.
    audit_events = get_audit_events(
        audit,
        compartments,
        start_time,
        end_time)

    #  Results for a region 'r' for each compartment.
    if audit_events:
        for e in audit_events:
            record = e.event_time + "," + e.data.identity.principal_namee.data.identity.ip_address + "," + e.data.event_name
            try:
                of.write(record)
            except OSError:
                print ("Error writing to Output file %s" % log_file_path)
            else:
                print ("Output success")

of.close